import { Item } from "./item";
import { Entrypoint } from "./entrypoint";
import { Project } from "./project";
import { JSONValue } from "./utils";
export declare type ExportsConditions = {
    module: string | {
        worker?: string;
        browser?: string;
        default: string;
    };
    default: string;
};
export declare type EnvCondition = "browser" | "worker";
export declare class Package extends Item<{
    name?: JSONValue;
    preconstruct: {
        exports?: {
            extra?: Record<string, JSONValue>;
            envConditions?: EnvCondition[];
        };
        entrypoints?: JSONValue;
    };
    exports?: Record<string, ExportsConditions | string>;
    dependencies?: Record<string, string>;
    peerDependencies?: Record<string, string>;
}> {
    project: Project;
    entrypoints: Array<Entrypoint>;
    get configEntrypoints(): Array<string>;
    static create(directory: string, project: Project, isFix: boolean): Promise<Package>;
    setFieldOnEntrypoints(field: "main" | "browser" | "module" | "umd:main"): void;
    get name(): string;
    exportsFieldConfig(): CanonicalExportsFieldConfig;
}
declare type CanonicalExportsFieldConfig = undefined | {
    envConditions: Set<"worker" | "browser">;
    extra: Record<string, JSONValue>;
};
export {};
